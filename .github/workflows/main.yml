name: my-bloody-sonar
on:
  schedule:
    - cron: '0 3 1 * *'
  push:
    branches:
      - develop
      - feature/*
      - main
    tags:
      - 'v*'
    paths-ignore:
      - README.md
  pull_request:
    branches:
      - main
  release:
    types: [published]

env:
  push_to_registry: false

jobs:

  getVersion:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Retrieve latest version
        run: echo ::set-output name=SONAR_TAG::$(curl -sL https://api.github.com/repos/SonarSource/docker-sonarqube/releases/latest | jq -r ".tag_name")
        id: version-sonar

#      - name: Get tag
#        id: tag
#        uses: dawidd6/action-get-tag@v1
#        if: ${{ github.event.release.published  == true }}
#        with:
#          # Optionally strip `v` prefix
#          strip_v: true

      - name: 'Get latest tag'
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: ${{ steps.tag.outputs.tag == null }}
        with:
          semver_only: true
        
      - name: 'strip_v'
        id: version
        if: ${{ steps.get-latest-tag.outputs.tag != null }}
        run: VERSION=${{ steps.get-latest-tag.outputs.tag }}; echo ::set-output name=version::${VERSION:1}

      - name: 'Print latest SonarSource tag'
        run: echo ${{ steps.version-sonar.outputs.SONAR_TAG }}

      - name: 'Print Current Bloody tag'
        run: echo ${{ steps.version.outputs.version }}

      - name: 'conditions check'
        run: echo ${{ steps.version-sonar.outputs.SONAR_TAG || steps.version.outputs.version }}

    outputs:
      version: ${{ steps.version.outputs.version || steps.version-sonar.outputs.SONAR_TAG }}

  test:
    needs: getVersion
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [ community, developer, enterprise ]
        version: [ lts, "${{ needs.getVersion.outputs.version }}" ]

    steps:
      - name: Setup BATS
        uses: mig4/setup-bats@v1

      - uses: actions/checkout@v2

      - name: test test-${{ matrix.version != '' && format('{0}-{1}',matrix.version, matrix.release) || format('{0}', matrix.release) }}
        run: make test VERSION=${{ matrix.version != '' && format('{0}-{1}',matrix.version, matrix.release) || format('{0}', matrix.release) }}
